/**
 * yet another binding for i18next
 * it's so damn hard to get react-18next work in next
 *
 * - required
 */
import { createContext, createElement, useContext, useEffect, useMemo, useRef, useState, } from 'react';
const I18NextReactContext = createContext(null);
const inServer = typeof window === 'undefined';
/**
 * A HOC to hold i18n instance InternalI18nState
 * @param {string|undefined} props.lang
 * @param {I18NFactory} props.factory see {@link I18NFactory}
 */
export const I18NextReactProvider = (props) => {
    const mounted = useMounted();
    const [internal, setInternal] = useState(() => {
        const instance = props.factory(inServer, props.lang);
        const ret = {
            instance,
            lng: instance.language,
            _onLanguageChanged(lang) {
                mounted.current && setInternal((prevInstance) => ({ ...prevInstance, lang }));
            },
        };
        if (!inServer) {
            instance.on('languageChanged', ret._onLanguageChanged);
        }
        return ret;
    });
    useEffect(() => {
        if (props.lang) {
            internal.instance.changeLanguage(props.lang); // and continue in languageChanged event handler
        }
    }, [props.lang]);
    useEffect(() => () => internal.instance.off('languageChanged', internal._onLanguageChanged), []);
    return createElement(I18NextReactContext.Provider, { value: internal }, props.children);
};
export function useI18n() {
    return useContext(I18NextReactContext).instance;
}
/**
 * like {@link useI18n}, but return null when resource bundle not available
 * @param {string} lng
 * @param {string} ns
 * @returns {i18n | null}
 */
export function useI18nLoaded(lng, ns) {
    const i18n = useI18n();
    const [resLoad, setResLoadCount] = useState(0);
    useEffect(() => {
        const triggerResourceCheck = () => setResLoadCount((_) => 1 + _);
        i18n.on('loaded', triggerResourceCheck);
        i18n.store.on('added', triggerResourceCheck);
        i18n.store.on('removed', triggerResourceCheck);
        return () => {
            i18n.off('loaded', triggerResourceCheck);
            /**
             * FIXME: remove type cast when my PR lands
             */
            i18n.store.off('added', triggerResourceCheck);
            i18n.store.off('removed', triggerResourceCheck);
        };
    }, [i18n]);
    return useMemo(() => i18n.hasResourceBundle(lng || '', ns || '') ? i18n.getFixedT(lng, ns) : null, [i18n, lng, ns, resLoad]);
}
export function useMounted() {
    const mounted = useRef(false);
    useEffect(() => {
        mounted.current = true;
        return () => {
            mounted.current = false;
        };
    }, []);
    return mounted;
}
//# sourceMappingURL=i18next-react.js.map